#!/usr/bin/env python3
"""
Comparaison des M√©thodes d'Optimisation
Compare les r√©sultats de l'optimisation g√©n√©tique et du RL
"""

import os
import sys
import pandas as pd
import numpy as np
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# Ajout du chemin pour importer les modules
sys.path.append('src/strategies')
from strategie_xauusd_sharpe1_simple import calculate_metrics

def analyze_drawdown_problem():
    """Analyse le probl√®me du drawdown"""
    print("üîç ANALYSE DU PROBL√àME DE DRAWDOWN")
    print("=" * 50)
    
    # Chargement des r√©sultats multi-timeframes
    analysis_dir = "results/analysis"
    summary_dirs = [d for d in os.listdir(analysis_dir) if d.startswith("XAUUSD_multi_timeframe_summary_")]
    
    if not summary_dirs:
        print("‚ùå Aucun rapport de synth√®se trouv√©")
        return
    
    latest_dir = max(summary_dirs)
    csv_file = os.path.join(analysis_dir, latest_dir, "resume_tous_timeframes.csv")
    
    if not os.path.exists(csv_file):
        print(f"‚ùå Fichier CSV non trouv√©: {csv_file}")
        return
    
    df = pd.read_csv(csv_file)
    
    print("üìä ANALYSE DES DRAWDOWNS PAR TIMEFRAME:")
    print()
    
    for _, row in df.iterrows():
        if row['Total_Trades'] == 0:
            continue
            
        drawdown = row['Max_Drawdown']
        status = "üü¢" if drawdown < 30 else "üü°" if drawdown < 50 else "üî¥"
        
        print(f"{status} {row['Timeframe']}: {drawdown:.1f}% drawdown")
        
        if drawdown > 100:
            print(f"   ‚ö†Ô∏è  DRAWDOWN CRITIQUE - Optimisation urgente requise")
        elif drawdown > 50:
            print(f"   ‚ö†Ô∏è  Drawdown √©lev√© - Optimisation recommand√©e")
        elif drawdown < 20:
            print(f"   ‚úÖ Drawdown excellent - Strat√©gie stable")
    
    print()
    print("üéØ CAUSES PROBABLES DU DRAWDOWN √âLEV√â:")
    print("1. Stop loss trop large ou inexistant")
    print("2. Position sizing inadapt√©")
    print("3. Corr√©lation des trades (tous dans la m√™me direction)")
    print("4. Manque de filtres de volatilit√©")
    print("5. Trailing stop inefficace")
    print("6. Pas de limite sur le nombre de positions simultan√©es")

def propose_solutions():
    """Propose des solutions pour r√©duire le drawdown"""
    print("\nüí° SOLUTIONS PROPOS√âES")
    print("=" * 50)
    
    solutions = {
        "Stop Loss Dynamique": {
            "description": "Stop loss bas√© sur l'ATR pour s'adapter √† la volatilit√©",
            "parametres": ["stop_loss_atr"],
            "impact": "R√©duction imm√©diate du drawdown"
        },
        "Position Sizing": {
            "description": "Taille de position bas√©e sur le risque par trade",
            "parametres": ["risk_per_trade", "max_positions"],
            "impact": "Contr√¥le du risque global"
        },
        "Filtres de Volatilit√©": {
            "description": "Filtres suppl√©mentaires pour √©viter les march√©s trop volatils",
            "parametres": ["volatility_filter", "atr_threshold"],
            "impact": "R√©duction des faux signaux"
        },
        "Trailing Stop Am√©lior√©": {
            "description": "Trailing stop plus r√©actif et adaptatif",
            "parametres": ["trail_atr", "trail_activation"],
            "impact": "Protection des gains"
        },
        "Corr√©lation des Positions": {
            "description": "Limitation des positions dans la m√™me direction",
            "parametres": ["max_long_positions", "max_short_positions"],
            "impact": "Diversification du risque"
        },
        "Time-based Exit": {
            "description": "Sortie automatique apr√®s un certain temps",
            "parametres": ["max_hold_time"],
            "impact": "√âviter les positions qui tra√Ænent"
        }
    }
    
    for i, (solution, details) in enumerate(solutions.items(), 1):
        print(f"{i}. {solution}")
        print(f"   üìù {details['description']}")
        print(f"   ‚öôÔ∏è  Param√®tres: {', '.join(details['parametres'])}")
        print(f"   üéØ Impact: {details['impact']}")
        print()

def compare_optimization_methods():
    """Compare les m√©thodes d'optimisation"""
    print("\nüîÑ COMPARAISON DES M√âTHODES D'OPTIMISATION")
    print("=" * 50)
    
    methods = {
        "Optimisation G√©n√©tique": {
            "avantages": [
                "Exploration large de l'espace des param√®tres",
                "Peut trouver des optima globaux",
                "Robuste aux minima locaux",
                "Parall√©lisable"
            ],
            "inconvenients": [
                "Temps de calcul √©lev√©",
                "Risque de suroptimisation",
                "Pas de garantie de convergence"
            ],
            "meilleur_pour": "Optimisation multi-objectifs, recherche de param√®tres optimaux"
        },
        "Reinforcement Learning": {
            "avantages": [
                "Apprentissage adaptatif",
                "Peut s'adapter aux changements de march√©",
                "Optimisation continue",
                "Gestion d'√©tat complexe"
            ],
            "inconvenients": [
                "Courbe d'apprentissage",
                "Difficile √† interpr√©ter",
                "Risque d'overfitting",
                "Complexit√© de mise en ≈ìuvre"
            ],
            "meilleur_pour": "Adaptation en temps r√©el, gestion d'√©tat complexe"
        },
        "Optimisation Manuelle": {
            "avantages": [
                "Contr√¥le total",
                "Compr√©hension des param√®tres",
                "Rapide √† impl√©menter",
                "Pas de suroptimisation"
            ],
            "inconvenients": [
                "Biais humain",
                "Exploration limit√©e",
                "Pas de garantie d'optimalit√©",
                "Temps humain important"
            ],
            "meilleur_pour": "Ajustements fins, compr√©hension de la strat√©gie"
        }
    }
    
    for method, details in methods.items():
        print(f"üîπ {method}")
        print(f"   ‚úÖ Avantages:")
        for avantage in details['avantages']:
            print(f"      ‚Ä¢ {avantage}")
        print(f"   ‚ùå Inconv√©nients:")
        for inconvenient in details['inconvenients']:
            print(f"      ‚Ä¢ {inconvenient}")
        print(f"   üéØ Meilleur pour: {details['meilleur_pour']}")
        print()

def recommend_approach():
    """Recommandation d'approche"""
    print("\nüéØ RECOMMANDATION D'APPROCHE")
    print("=" * 50)
    
    print("üìã PLAN D'ACTION RECOMMAND√â:")
    print()
    print("1Ô∏è‚É£ PHASE 1: Optimisation G√©n√©tique (Priorit√©)")
    print("   ‚Ä¢ Objectif: R√©duire le drawdown < 30%")
    print("   ‚Ä¢ Focus: Stop loss, position sizing, trailing stop")
    print("   ‚Ä¢ Dur√©e: 2-3 heures d'optimisation")
    print("   ‚Ä¢ R√©sultat attendu: Param√®tres de base optimis√©s")
    print()
    
    print("2Ô∏è‚É£ PHASE 2: Ajustements Manuels")
    print("   ‚Ä¢ Objectif: Affiner les param√®tres")
    print("   ‚Ä¢ Focus: Filtres de volatilit√©, corr√©lation des positions")
    print("   ‚Ä¢ Dur√©e: 1-2 heures de tests")
    print("   ‚Ä¢ R√©sultat attendu: Strat√©gie stable")
    print()
    
    print("3Ô∏è‚É£ PHASE 3: Reinforcement Learning (Optionnel)")
    print("   ‚Ä¢ Objectif: Adaptation en temps r√©el")
    print("   ‚Ä¢ Focus: Gestion d'√©tat, adaptation aux changements")
    print("   ‚Ä¢ Dur√©e: Plusieurs jours d'entra√Ænement")
    print("   ‚Ä¢ R√©sultat attendu: Strat√©gie adaptative")
    print()
    
    print("‚ö° PARAM√àTRES PRIORITAIRES √Ä OPTIMISER:")
    print("   ‚Ä¢ stop_loss_atr: 1.0 - 4.0")
    print("   ‚Ä¢ max_positions: 1 - 3")
    print("   ‚Ä¢ trail_atr: 0.3 - 2.0")
    print("   ‚Ä¢ risk_per_trade: 0.5 - 3.0")
    print("   ‚Ä¢ volatility_filter: Nouveau param√®tre")
    print("   ‚Ä¢ max_hold_time: Nouveau param√®tre")

def create_optimization_plan():
    """Cr√©e un plan d'optimisation d√©taill√©"""
    print("\nüìã PLAN D'OPTIMISATION D√âTAILL√â")
    print("=" * 50)
    
    plan = {
        "√âtape 1": {
            "action": "Lancer l'optimisation g√©n√©tique",
            "commande": "python optimisation_genetique_drawdown.py",
            "objectif": "R√©duire drawdown < 30%",
            "duree": "2-3 heures"
        },
        "√âtape 2": {
            "action": "Analyser les r√©sultats",
            "commande": "python afficher_resultats_multitimeframes.py",
            "objectif": "V√©rifier l'am√©lioration",
            "duree": "30 minutes"
        },
        "√âtape 3": {
            "action": "Ajustements manuels si n√©cessaire",
            "commande": "Modification des param√®tres",
            "objectif": "Affiner les performances",
            "duree": "1-2 heures"
        },
        "√âtape 4": {
            "action": "Test multi-timeframes",
            "commande": "python test_all_timeframes_xauusd.py",
            "objectif": "Validation compl√®te",
            "duree": "1 heure"
        }
    }
    
    for etape, details in plan.items():
        print(f"üîπ {etape}")
        print(f"   üìù Action: {details['action']}")
        print(f"   üíª Commande: {details['commande']}")
        print(f"   üéØ Objectif: {details['objectif']}")
        print(f"   ‚è±Ô∏è  Dur√©e: {details['duree']}")
        print()

def main():
    """Fonction principale"""
    print("üîç ANALYSE COMPL√àTE DU PROBL√àME DE DRAWDOWN")
    print("=" * 70)
    
    # Analyse du probl√®me
    analyze_drawdown_problem()
    
    # Solutions propos√©es
    propose_solutions()
    
    # Comparaison des m√©thodes
    compare_optimization_methods()
    
    # Recommandation
    recommend_approach()
    
    # Plan d'optimisation
    create_optimization_plan()
    
    print("\nüöÄ PROCHAINES √âTAPES:")
    print("1. Lancer l'optimisation g√©n√©tique")
    print("2. Analyser les r√©sultats")
    print("3. Ajuster si n√©cessaire")
    print("4. Valider sur tous les timeframes")
    
    print("\nüí° CONSEIL: Commencez par l'optimisation g√©n√©tique sur H4 (meilleur drawdown actuel)")

if __name__ == "__main__":
    main() 