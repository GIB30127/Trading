#!/usr/bin/env python3
"""
D√©monstration de la Strat√©gie XAUUSD D1 Sharpe 1 Simple
Transform√©e depuis Pine Script vers Python pour backtesting MT5/CSV

Auteur: Assistant IA
Date: 2025-07-24
"""

import os
import sys
import pandas as pd
import numpy as np
from datetime import datetime
from rich import print
from rich.table import Table
from rich.console import Console
import warnings
warnings.filterwarnings('ignore')

# Ajout des chemins pour importer les modules
sys.path.append('src/strategies')
sys.path.append('src/backtesting')

# Import des strat√©gies
from strategie_xauusd_sharpe1_simple import strategie_xauusd_sharpe1_simple, calculate_metrics
from strategie_xauusd_sharpe1_mt5_live import XAUUSDSharpe1LiveStrategy

console = Console()

def print_banner():
    """Affiche la banni√®re de d√©monstration"""
    console.print("""
[bold blue]
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    STRAT√âGIE XAUUSD D1                       ‚ïë
‚ïë                   SHARPE 1 SIMPLE                            ‚ïë
‚ïë                                                              ‚ïë
‚ïë  Transform√©e depuis Pine Script vers Python                  ‚ïë
‚ïë  Compatible MT5 et CSV                                       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
[/bold blue]
    """)

def show_strategy_parameters():
    """Affiche les param√®tres de la strat√©gie"""
    console.print("\n[bold yellow]üìä PARAM√àTRES DE LA STRAT√âGIE[/bold yellow]")
    
    table = Table(title="Configuration")
    table.add_column("Param√®tre", style="cyan")
    table.add_column("Valeur", style="green")
    table.add_column("Description", style="white")
    
    table.add_row("Breakout Period", "2", "P√©riode pour d√©tecter les breakouts")
    table.add_row("Profit ATR", "2.5", "Multiplicateur ATR pour le take profit")
    table.add_row("Trail ATR", "0.5", "Multiplicateur ATR pour le trailing stop")
    table.add_row("RSI Overbought", "85", "Niveau de surachat RSI")
    table.add_row("RSI Oversold", "15", "Niveau de survente RSI")
    table.add_row("EMA Short", "4", "EMA courte")
    table.add_row("EMA Long", "12", "EMA longue")
    table.add_row("ATR Period", "8", "P√©riode pour le calcul ATR")
    
    console.print(table)

def show_strategy_logic():
    """Affiche la logique de la strat√©gie"""
    console.print("\n[bold yellow]üß† LOGIQUE DE LA STRAT√âGIE[/bold yellow]")
    
    console.print("""
[bold cyan]CONDITIONS D'ENTR√âE LONG:[/bold cyan]
‚Ä¢ Breakout au-dessus du plus haut des 2 derni√®res bougies
‚Ä¢ EMA courte > EMA longue (tendance haussi√®re)
‚Ä¢ Prix > EMA courte
‚Ä¢ RSI < 85 et > 20
‚Ä¢ ATR > moyenne ATR * 0.3 (volatilit√© suffisante)
‚Ä¢ Volume > moyenne volume * 0.5
‚Ä¢ Momentum haussier (prix > prix pr√©c√©dent)

[bold cyan]CONDITIONS D'ENTR√âE SHORT:[/bold cyan]
‚Ä¢ Breakout en-dessous du plus bas des 2 derni√®res bougies
‚Ä¢ EMA courte < EMA longue (tendance baissi√®re)
‚Ä¢ Prix < EMA courte
‚Ä¢ RSI > 15 et < 80
‚Ä¢ ATR > moyenne ATR * 0.3 (volatilit√© suffisante)
‚Ä¢ Volume > moyenne volume * 0.5
‚Ä¢ Momentum baissier (prix < prix pr√©c√©dent)

[bold cyan]GESTION DES SORTIES:[/bold cyan]
‚Ä¢ Take Profit: Prix d'entr√©e ¬± (2.5 √ó ATR)
‚Ä¢ Stop Loss: Trailing stop bas√© sur 0.5 √ó ATR
‚Ä¢ Sortie sur signal oppos√©
    """)

def run_backtest_demo():
    """Ex√©cute une d√©monstration de backtest"""
    console.print("\n[bold yellow]üöÄ D√âMONSTRATION BACKTEST[/bold yellow]")
    
    # V√©rification des donn√©es
    csv_path = "data/raw/XAUUSD_D1_mt5.csv"
    
    if not os.path.exists(csv_path):
        console.print(f"[red]‚ùå Fichier de donn√©es non trouv√©: {csv_path}[/red]")
        console.print("Veuillez placer un fichier CSV dans le dossier data/raw/")
        return None
    
    try:
        # Chargement des donn√©es
        console.print(f"[green]üìÅ Chargement des donn√©es depuis: {csv_path}[/green]")
        df = pd.read_csv(csv_path)
        df['Date'] = pd.to_datetime(df['Date'])
        
        console.print(f"[green]‚úÖ {len(df)} bougies charg√©es[/green]")
        console.print(f"[green]üìÖ P√©riode: {df['Date'].min()} √† {df['Date'].max()}[/green]")
        
        # Application de la strat√©gie
        console.print("\n[bold]‚öôÔ∏è Application de la strat√©gie...[/bold]")
        trades, df_with_signals = strategie_xauusd_sharpe1_simple(df, 'XAUUSD', 'D1')
        
        # Calcul des m√©triques
        metrics = calculate_metrics(trades)
        
        # Affichage des r√©sultats
        console.print("\n[bold green]üìà R√âSULTATS DU BACKTEST[/bold green]")
        
        results_table = Table(title="Performance de la Strat√©gie")
        results_table.add_column("M√©trique", style="cyan")
        results_table.add_column("Valeur", style="green")
        
        results_table.add_row("Total Trades", str(metrics['total_trades']))
        results_table.add_row("Trades Gagnants", str(metrics['winning_trades']))
        results_table.add_row("Trades Perdants", str(metrics['losing_trades']))
        results_table.add_row("Taux de R√©ussite", f"{metrics['win_rate']:.2f}%")
        results_table.add_row("Retour Total", f"{metrics['total_return']:.2f}%")
        results_table.add_row("Gain Moyen", f"{metrics['avg_win']:.2f}%")
        results_table.add_row("Perte Moyenne", f"{metrics['avg_loss']:.2f}%")
        results_table.add_row("Profit Factor", f"{metrics['profit_factor']:.2f}")
        results_table.add_row("Drawdown Max", f"{metrics['max_drawdown']:.2f}%")
        results_table.add_row("Ratio de Sharpe", f"{metrics['sharpe_ratio']:.2f}")
        
        console.print(results_table)
        
        # Affichage des derniers trades
        if trades:
            console.print("\n[bold]üìã DERNIERS 5 TRADES[/bold]")
            trades_table = Table(title="Historique des Trades")
            trades_table.add_column("N¬∞", style="cyan")
            trades_table.add_column("Position", style="yellow")
            trades_table.add_column("Entr√©e", style="green")
            trades_table.add_column("Sortie", style="red")
            trades_table.add_column("P&L", style="magenta")
            trades_table.add_column("Raison", style="blue")
            
            for i, trade in enumerate(trades[-5:], 1):
                status = "‚úÖ" if trade.get('pnl', 0) > 0 else "‚ùå" if trade.get('pnl', 0) < 0 else "‚è≥"
                pnl_str = f"{trade.get('pnl', 0):.2f}%" if 'pnl' in trade else "En cours"
                exit_price = f"{trade.get('exit_price', 0):.2f}" if 'exit_price' in trade else "En cours"
                
                trades_table.add_row(
                    str(i),
                    f"{status} {trade['position']}",
                    f"{trade['entry_price']:.2f}",
                    exit_price,
                    pnl_str,
                    trade.get('exit_reason', 'En cours')
                )
            
            console.print(trades_table)
        
        return {
            'trades': trades,
            'metrics': metrics,
            'data': df_with_signals
        }
        
    except Exception as e:
        console.print(f"[red]‚ùå Erreur lors du backtest: {e}[/red]")
        return None

def show_live_strategy_demo():
    """D√©monstration de la strat√©gie en temps r√©el"""
    console.print("\n[bold yellow]üîÑ D√âMONSTRATION STRAT√âGIE TEMPS R√âEL[/bold yellow]")
    
    # Initialisation de la strat√©gie
    strategy = XAUUSDSharpe1LiveStrategy("XAUUSD", "D1")
    
    # Chargement des donn√©es
    csv_path = "data/raw/XAUUSD_D1_mt5.csv"
    
    if not os.path.exists(csv_path):
        console.print(f"[red]‚ùå Fichier de donn√©es non trouv√©[/red]")
        return
    
    df = pd.read_csv(csv_path)
    df['Date'] = pd.to_datetime(df['Date'])
    
    console.print(f"[green]‚úÖ Simulation temps r√©el avec {len(df)} bougies[/green]")
    
    # Simulation du trading en temps r√©el
    console.print("\n[bold]üéØ SIMULATION TRADING TEMPS R√âEL[/bold]")
    
    for i in range(20, min(50, len(df))):  # Simule les 30 premi√®res bougies
        result = strategy.process_new_data(df, i)
        
        if result:
            console.print(f"[yellow]üìä Trade ex√©cut√©: {result}[/yellow]")
    
    # Statut final
    status = strategy.get_current_status()
    console.print(f"\n[bold]üìä STATUT FINAL[/bold]")
    console.print(f"Position actuelle: {status['position']}")
    console.print(f"Prix d'entr√©e: {status['entry_price']:.2f}")
    console.print(f"Stop Loss: {status['stop_loss']:.2f}")
    console.print(f"Profit Target: {status['profit_target']:.2f}")
    console.print(f"Total trades: {status['total_trades']}")

def show_usage_examples():
    """Affiche des exemples d'utilisation"""
    console.print("\n[bold yellow]üí° EXEMPLES D'UTILISATION[/bold yellow]")
    
    console.print("""
[bold cyan]1. Backtest simple avec CSV:[/bold cyan]
```python
from src.strategies.strategie_xauusd_sharpe1_simple import strategie_xauusd_sharpe1_simple

# Chargement des donn√©es
df = pd.read_csv("data/raw/XAUUSD_D1_mt5.csv")
df['Date'] = pd.to_datetime(df['Date'])

# Application de la strat√©gie
trades, df_signals = strategie_xauusd_sharpe1_simple(df, 'XAUUSD', 'D1')
```

[bold cyan]2. Trading en temps r√©el avec MT5:[/bold cyan]
```python
from src.strategies.strategie_xauusd_sharpe1_mt5_live import XAUUSDSharpe1LiveStrategy

# Initialisation
strategy = XAUUSDSharpe1LiveStrategy("XAUUSD", "D1")

# Pour chaque nouvelle bougie
result = strategy.process_new_data(df, current_index)
if result:
    print(f"Nouveau trade: {result}")
```

[bold cyan]3. Test multi-timeframes:[/bold cyan]
```python
python src/backtesting/backtest_all_xauusd_sharpe1.py
```

[bold cyan]4. Connexion MT5 directe:[/bold cyan]
```python
import MetaTrader5 as mt5

# Initialisation
mt5.initialize()

# R√©cup√©ration des donn√©es
rates = mt5.copy_rates_from_pos("XAUUSD", mt5.TIMEFRAME_D1, 0, 1000)
df = pd.DataFrame(rates)
```
    """)

def main():
    """Fonction principale de d√©monstration"""
    print_banner()
    
    # Affichage des param√®tres
    show_strategy_parameters()
    
    # Affichage de la logique
    show_strategy_logic()
    
    # D√©monstration backtest
    results = run_backtest_demo()
    
    # D√©monstration temps r√©el
    show_live_strategy_demo()
    
    # Exemples d'utilisation
    show_usage_examples()
    
    console.print("\n[bold green]‚úÖ D√©monstration termin√©e![/bold green]")
    console.print("\n[bold]üìö Pour plus d'informations, consultez les fichiers:[/bold]")
    console.print("‚Ä¢ src/strategies/strategie_xauusd_sharpe1_simple.py")
    console.print("‚Ä¢ src/strategies/strategie_xauusd_sharpe1_mt5_live.py")
    console.print("‚Ä¢ src/backtesting/backtest_xauusd_sharpe1_simple.py")

if __name__ == "__main__":
    main() 